//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package api

import (
	"net/http"
	"net/url"

	"github.com/mkideal/pkg/netutil/httputil"
	"github.com/mkideal/pkg/typeconv"
)

func (argv *HelpReq) Parse(r *http.Request) error {
	var err error
	argv.Version, err = httputil.ParseString(r, "version")
	if err != nil {
		return err
	}
	argv.Cmd, err = httputil.ParseString(r, "cmd")
	if err != nil {
		return err
	}

	return err
}

func (argv *HelpReq) Values() url.Values {
	return url.Values{
		"version": {typeconv.ToString(argv.Version)},
		"cmd":     {typeconv.ToString(argv.Cmd)},
	}
}

func (argv *TokenReq) Parse(r *http.Request) error {
	var err error
	argv.GrantType, err = httputil.ParseString(r, "grant_type")
	if err != nil {
		return err
	}
	argv.Scope, err = httputil.ParseString(r, "scope")
	if err != nil {
		return err
	}
	argv.Code, err = httputil.ParseString(r, "code")
	if err != nil {
		return err
	}
	argv.RedirectURI, err = httputil.ParseString(r, "redirect_uri")
	if err != nil {
		return err
	}
	argv.Username, err = httputil.ParseString(r, "username")
	if err != nil {
		return err
	}
	argv.Password, err = httputil.ParseString(r, "password")
	if err != nil {
		return err
	}
	argv.RefreshToken, err = httputil.ParseString(r, "refresh_token")
	if err != nil {
		return err
	}

	return err
}

func (argv *TokenReq) Values() url.Values {
	return url.Values{
		"grant_type":    {typeconv.ToString(argv.GrantType)},
		"scope":         {typeconv.ToString(argv.Scope)},
		"code":          {typeconv.ToString(argv.Code)},
		"redirect_uri":  {typeconv.ToString(argv.RedirectURI)},
		"username":      {typeconv.ToString(argv.Username)},
		"password":      {typeconv.ToString(argv.Password)},
		"refresh_token": {typeconv.ToString(argv.RefreshToken)},
	}
}

func (argv *AuthorizeReq) Parse(r *http.Request) error {
	var err error
	argv.ClientId, err = httputil.ParseString(r, "client_id")
	if err != nil {
		return err
	}
	argv.ResponseType, err = httputil.ParseString(r, "response_type")
	if err != nil {
		return err
	}
	argv.Uid, err = httputil.ParseInt64(r, "uid")
	if err != nil {
		return err
	}
	argv.Scope, err = httputil.ParseString(r, "scope")
	if err != nil {
		return err
	}
	argv.State, err = httputil.ParseString(r, "state")
	if err != nil {
		return err
	}

	return err
}

func (argv *AuthorizeReq) Values() url.Values {
	return url.Values{
		"client_id":     {typeconv.ToString(argv.ClientId)},
		"response_type": {typeconv.ToString(argv.ResponseType)},
		"uid":           {typeconv.ToString(argv.Uid)},
		"scope":         {typeconv.ToString(argv.Scope)},
		"state":         {typeconv.ToString(argv.State)},
	}
}

func (argv *AuthorizeCheckReq) Parse(r *http.Request) error {
	var err error
	argv.ClientId, err = httputil.ParseString(r, "client_id")
	if err != nil {
		return err
	}

	return err
}

func (argv *AuthorizeCheckReq) Values() url.Values {
	return url.Values{
		"client_id": {typeconv.ToString(argv.ClientId)},
	}
}

func (argv *TokenAuthReq) Parse(r *http.Request) error {
	var err error
	argv.AccessToken, err = httputil.ParseString(r, "access_token")
	if err != nil {
		return err
	}

	return err
}

func (argv *TokenAuthReq) Values() url.Values {
	return url.Values{
		"access_token": {typeconv.ToString(argv.AccessToken)},
	}
}

func (argv *SignupReq) Parse(r *http.Request) error {
	var err error
	argv.AccountType, err = httputil.ParseInt(r, "account_type")
	if err != nil {
		return err
	}
	argv.Account, err = httputil.ParseString(r, "account")
	if err != nil {
		return err
	}
	argv.Password, err = httputil.ParseString(r, "password")
	if err != nil {
		return err
	}
	argv.Nickname, err = httputil.ParseString(r, "nickname")
	if err != nil {
		return err
	}
	argv.ThirdClientId, err = httputil.ParseString(r, "third_client_id")
	if err != nil {
		return err
	}
	argv.ThirdClientSecret, err = httputil.ParseString(r, "third_client_secret")
	if err != nil {
		return err
	}
	argv.ThirdOpenId, err = httputil.ParseString(r, "third_open_id")
	if err != nil {
		return err
	}
	argv.ThirdAccessToken, err = httputil.ParseString(r, "third_access_token")
	if err != nil {
		return err
	}

	return err
}

func (argv *SignupReq) Values() url.Values {
	return url.Values{
		"account_type":        {typeconv.ToString(argv.AccountType)},
		"account":             {typeconv.ToString(argv.Account)},
		"password":            {typeconv.ToString(argv.Password)},
		"nickname":            {typeconv.ToString(argv.Nickname)},
		"third_client_id":     {typeconv.ToString(argv.ThirdClientId)},
		"third_client_secret": {typeconv.ToString(argv.ThirdClientSecret)},
		"third_open_id":       {typeconv.ToString(argv.ThirdOpenId)},
		"third_access_token":  {typeconv.ToString(argv.ThirdAccessToken)},
	}
}

func (argv *AutoSignupReq) Parse(r *http.Request) error {
	var err error

	return err
}

func (argv *AutoSignupReq) Values() url.Values {
	return url.Values{}
}

func (argv *AccountExistReq) Parse(r *http.Request) error {
	var err error
	argv.Username, err = httputil.ParseString(r, "username")
	if err != nil {
		return err
	}

	return err
}

func (argv *AccountExistReq) Values() url.Values {
	return url.Values{
		"username": {typeconv.ToString(argv.Username)},
	}
}

func (argv *SigninReq) Parse(r *http.Request) error {
	var err error
	argv.AccountType, err = httputil.ParseInt(r, "account_type")
	if err != nil {
		return err
	}
	argv.Account, err = httputil.ParseString(r, "account")
	if err != nil {
		return err
	}
	argv.Password, err = httputil.ParseString(r, "password")
	if err != nil {
		return err
	}

	return err
}

func (argv *SigninReq) Values() url.Values {
	return url.Values{
		"account_type": {typeconv.ToString(argv.AccountType)},
		"account":      {typeconv.ToString(argv.Account)},
		"password":     {typeconv.ToString(argv.Password)},
	}
}

func (argv *SignoutReq) Parse(r *http.Request) error {
	var err error
	argv.Uid, err = httputil.ParseInt64(r, "uid")
	if err != nil {
		return err
	}

	return err
}

func (argv *SignoutReq) Values() url.Values {
	return url.Values{
		"uid": {typeconv.ToString(argv.Uid)},
	}
}

func (argv *SMSCodeReq) Parse(r *http.Request) error {
	var err error
	argv.Telno, err = httputil.ParseString(r, "telno")
	if err != nil {
		return err
	}

	return err
}

func (argv *SMSCodeReq) Values() url.Values {
	return url.Values{
		"telno": {typeconv.ToString(argv.Telno)},
	}
}

func (argv *TwoFactorAuthReq) Parse(r *http.Request) error {
	var err error
	argv.AuthType, err = httputil.ParseString(r, "auth_type")
	if err != nil {
		return err
	}
	argv.AuthId, err = httputil.ParseString(r, "auth_id")
	if err != nil {
		return err
	}
	argv.AuthCode, err = httputil.ParseString(r, "auth_code")
	if err != nil {
		return err
	}

	return err
}

func (argv *TwoFactorAuthReq) Values() url.Values {
	return url.Values{
		"auth_type": {typeconv.ToString(argv.AuthType)},
		"auth_id":   {typeconv.ToString(argv.AuthId)},
		"auth_code": {typeconv.ToString(argv.AuthCode)},
	}
}

func (argv *UserReq) Parse(r *http.Request) error {
	var err error
	argv.Uid, err = httputil.ParseInt64(r, "uid")
	if err != nil {
		return err
	}
	argv.Account, err = httputil.ParseString(r, "account")
	if err != nil {
		return err
	}

	return err
}

func (argv *UserReq) Values() url.Values {
	return url.Values{
		"uid":     {typeconv.ToString(argv.Uid)},
		"account": {typeconv.ToString(argv.Account)},
	}
}

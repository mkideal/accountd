//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package api

type ErrorCode int

const (
	ErrorCode_UserNotFound          ErrorCode = 101
	ErrorCode_TokenNotFound         ErrorCode = 102
	ErrorCode_ClientNotFound        ErrorCode = 103
	ErrorCode_SessionNotFound       ErrorCode = 104
	ErrorCode_IncorrectPassword     ErrorCode = 201
	ErrorCode_IncorrectClientSecret ErrorCode = 202
	ErrorCode_IllegalUsername       ErrorCode = 301
	ErrorCode_IllegalAccountType    ErrorCode = 302
	ErrorCode_IllegalPassword       ErrorCode = 303
	ErrorCode_IllegalEmail          ErrorCode = 304
	ErrorCode_IllegalTelno          ErrorCode = 305
	ErrorCode_MissingArgument       ErrorCode = 401
	ErrorCode_AccountDuplicated     ErrorCode = 402
)

// 通用错误返回
type ErrorRes struct {
	Code        int    `json:"code"` // ErrorCode
	Description string `json:"description"`
}

// 查看帮助
type HelpReq struct {
	Version string `json:"version"`
	Cmd     string `json:"cmd"`
}

func (HelpReq) CommandName() string { return "Help" }

type HelpRes struct {
}

// oauth2.0 接口 token
type TokenReq struct {
	GrantType    string `json:"grant_type"`    // 授权类型
	Scope        string `json:"scope"`         // token使用范围
	Code         string `json:"code"`          // 授权码
	RedirectURI  string `json:"redirect_uri"`  // 重定向URI
	Username     string `json:"username"`      // 账号
	Password     string `json:"password"`      // 密码
	RefreshToken string `json:"refresh_token"` // 刷新用token

}

func (TokenReq) CommandName() string { return "Token" }

type TokenRes struct {
	TokenType string    `json:"token_type"`
	Token     TokenInfo `json:"token"`
}

// oauth2.0 接口 authorize
type AuthorizeReq struct {
	ClientId     string `json:"client_id"`
	ResponseType string `json:"response_type"`
	Uid          int64  `json:"uid"`
	Scope        string `json:"scope"`
	State        string `json:"state"`
}

func (AuthorizeReq) CommandName() string { return "Authorize" }

// client 检查
type AuthorizeCheckReq struct {
	ClientId string `json:"client_id"`
}

func (AuthorizeCheckReq) CommandName() string { return "AuthorizeCheck" }

type AuthorizeCheckRes struct {
	Application string `json:"application"`
	Username    string `json:"username"`
}

// 获取 token 信息
type TokenInfoReq struct {
	AccessToken string `json:"access_token"`
}

func (TokenInfoReq) CommandName() string { return "TokenInfo" }

type TokenInfoRes struct {
	Uid   int64     `json:"uid"`
	Token TokenInfo `json:"token"`
}

type TokenInfo struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	Scope        string `json:"scope"`
	ExpireAt     string `json:"expire_at"`
}

// 注册
type SignupReq struct {
	AccountType int    `json:"account_type"` // 账号类型:参见 model.AccountType 枚举
	Account     string `json:"account"`      // 账号:当 accountType 为第三方账号时为openId
	Password    string `json:"password"`     // 密码:当 accountType 为第三方账号时不需要
	Nickname    string `json:"nickname"`     // 昵称,可选

}

func (SignupReq) CommandName() string { return "Signup" }

type SignupRes struct {
	Uid      int64  `json:"uid"`
	Account  string `json:"account"`
	Nickname string `json:"nickname"`
}

// 快捷注册
type AutoSignupReq struct {
}

func (AutoSignupReq) CommandName() string { return "AutoSignup" }

type AutoSignupRes struct {
	Uid   int64     `json:"uid"`
	Token TokenInfo `json:"token"`
}

// 检查账号是否存在
type AccountExistReq struct {
	Username string `json:"username"`
}

func (AccountExistReq) CommandName() string { return "AccountExist" }

type AccountExistRes struct {
	Existed bool `json:"existed"`
}

// 登陆
type SigninReq struct {
	AccountType int    `json:"account_type"` // 账号类型:参见 model.AccountType 枚举
	Account     string `json:"account"`      // 账号:当 accountType 为第三方账号时为openId
	Password    string `json:"password"`     // 密码:当 accountType 为第三方账号时不需要

}

func (SigninReq) CommandName() string { return "Signin" }

type SigninRes struct {
	User  UserInfo  `json:"user"`
	Token TokenInfo `json:"token"`
}

// 登出
type SignoutReq struct {
	Uid int64 `json:"uid"`
}

func (SignoutReq) CommandName() string { return "Signout" }

type SignoutRes struct {
}

// 用户信息
type UserReq struct {
	Uid     int64  `json:"uid"`
	Account string `json:"account"`
}

func (UserReq) CommandName() string { return "User" }

type UserRes struct {
	User UserInfo `json:"user"`
}

type UserInfo struct {
	Id          int64  `json:"id"`
	Account     string `json:"account"`
	Nickname    string `json:"nickname"`
	Avatar      string `json:"avatar"`
	Qrcode      string `json:"qrcode"`
	Gender      int    `json:"gender"`
	Birthday    string `json:"birthday"`
	LastLoginAt string `json:"last_login_at"`
	LastLoginIp string `json:"last_login_ip"`
}

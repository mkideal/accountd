package api;

enum ErrorCode {
	UserNotFound    = 101,
	TokenNotFound   = 102,
	ClientNotFound  = 103,
	SessionNotFound = 104,

    IncorrectPassword     = 201,
    IncorrectClientSecret = 202,

    IllegalUsername    = 301,
    IllegalAccountType = 302,
    IllegalPassword    = 303,
    IllegalEmail       = 304,
    IllegalTelno       = 305,

    MissingArgument   = 401,
    AccountDuplicated = 402,
}

// 通用错误返回
protocol ErrorRes {
    int code; // ErrorCode
    string description;
}

struct UserInfo {
	int64 id;
	string account;
	string nickname;
	string avatar;
	string qrcode;
	int gender;
	string birthday;
	string lastLoginAt;
	string lastLoginIp;
}

struct TokenInfo {
    string accessToken;
    string refreshToken;
    string scope;
    string expireAt;
}

// 查看帮助
protocol HelpReq {
	string version;
	string cmd;
}

protocol HelpRes {
}

// oauth2.0 接口 token
protocol TokenReq `method:"POST"` {
	string grantType; // 授权类型
	string scope;     // token使用范围

    // grantType 为 GrantAuthenticationCode 时的参数
    string code;        // 授权码
    string redirectURI; // 重定向URI

    // grantType 为 GrantPassword 时的参数
    string username; // 账号
    string password; // 密码

    // grantType 为 GrantRefreshToken 时的参数
    string refreshToken; // 刷新用token
}

protocol TokenRes {
	string tokenType;
    TokenInfo token;
}

// oauth2.0 接口 authorize
protocol AuthorizeReq `method:"POST"` {
    string clientId;
    string responseType;
    int64 uid;
    string scope;
    string state;
}

// client 检查
protocol AuthorizeCheckReq {
    string clientId;
}

protocol AuthorizeCheckRes {
    string application;
    string username;
}

// token 认证
protocol TokenAuthReq `method:"POST"` {
    string accessToken;
}

protocol TokenAuthRes {
	UserInfo user;
    TokenInfo token;
}

// 注册
protocol SignupReq `method:"POST"` {
	int accountType; // 账号类型:参见 model.AccountType 枚举
	string account;  // 账号:当 accountType 为第三方账号时为openId
	string password; // 密码:当 accountType 为第三方账号时不需要
    string nickname; // 昵称,可选
}

protocol SignupRes {
    int64 uid;
    string account;
    string nickname;
}

// 快捷注册
protocol AutoSignupReq `method:"POST"` {
}

protocol AutoSignupRes {
    int64 uid;
    TokenInfo token;
}

// 检查账号是否存在
protocol AccountExistReq {
    string username;
}

protocol AccountExistRes {
    bool existed;
}

// 登陆
protocol SigninReq `method:"POST"` {
	int accountType; // 账号类型:参见 model.AccountType 枚举
	string account;  // 账号:当 accountType 为第三方账号时为openId
	string password; // 密码:当 accountType 为第三方账号时不需要
}

protocol SigninRes {
    UserInfo user;
    TokenInfo token;
}

// 登出
protocol SignoutReq `method:"POST"` {
    int64 uid;
}

protocol SignoutRes {
}

// 用户信息
protocol UserReq {
	int64 uid;
	string account;
}

protocol UserRes {
	UserInfo user;
}


// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
)

// Table

// 手机验证码
type TelnoVerifyCode struct {
	Id        int64  `xorm:"pk BIGINT(20) AUTO_INCREMENT"` // 递增唯一Id
	Telno     string `xorm:"VARCHAR(32)"`                  // 手机号码
	Code      string `xorm:"VARCHAR(8)"`                   // 验证码
	ExpiredAt string `xorm:"VARCHAR(32)"`                  // 到期时间

}

func NewTelnoVerifyCode() *TelnoVerifyCode {
	return &TelnoVerifyCode{}
}

func (TelnoVerifyCode) Meta() storage.TableMeta { return TelnoVerifyCodeMetaVar }
func (x TelnoVerifyCode) Key() interface{}      { return x.Id }
func (x *TelnoVerifyCode) SetKey(value string) error {
	return typeconv.String2Int64(&x.Id, value)
}

func (x TelnoVerifyCode) GetField(field string) (interface{}, bool) {
	switch field {
	case TelnoVerifyCodeMetaVar.F_telno:
		return x.Telno, true
	case TelnoVerifyCodeMetaVar.F_code:
		return x.Code, true
	case TelnoVerifyCodeMetaVar.F_expired_at:
		return x.ExpiredAt, true
	}
	return nil, false
}

func (x *TelnoVerifyCode) SetField(field, value string) error {
	switch field {
	case TelnoVerifyCodeMetaVar.F_telno:
		x.Telno = value
	case TelnoVerifyCodeMetaVar.F_code:
		x.Code = value
	case TelnoVerifyCodeMetaVar.F_expired_at:
		x.ExpiredAt = value
	}
	return nil
}

// Meta
type TelnoVerifyCodeMeta struct {
	F_telno      string
	F_code       string
	F_expired_at string
}

func (TelnoVerifyCodeMeta) Name() string     { return "telno_verify_code" }
func (TelnoVerifyCodeMeta) Key() string      { return "id" }
func (TelnoVerifyCodeMeta) Fields() []string { return _telno_verify_code_fields }

var TelnoVerifyCodeMetaVar = &TelnoVerifyCodeMeta{
	F_telno:      "telno",
	F_code:       "code",
	F_expired_at: "expired_at",
}

var _telno_verify_code_fields = []string{
	TelnoVerifyCodeMetaVar.F_telno,
	TelnoVerifyCodeMetaVar.F_code,
	TelnoVerifyCodeMetaVar.F_expired_at,
}

// Slice
type TelnoVerifyCodeSlice []TelnoVerifyCode

func NewTelnoVerifyCodeSlice(cap int) *TelnoVerifyCodeSlice {
	s := TelnoVerifyCodeSlice(make([]TelnoVerifyCode, 0, cap))
	return &s
}

func (s TelnoVerifyCodeSlice) Len() int                                  { return len(s) }
func (s TelnoVerifyCodeSlice) ReadonlyTable(i int) storage.ReadonlyTable { return s[i] }
func (s *TelnoVerifyCodeSlice) Slice() []TelnoVerifyCode                 { return []TelnoVerifyCode(*s) }

func (s *TelnoVerifyCodeSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	for len(*s) <= index {
		*s = append(*s, TelnoVerifyCode{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type TelnoVerifyCodeView struct {
	TelnoVerifyCode
}

type TelnoVerifyCodeViewSlice []TelnoVerifyCodeView

func NewTelnoVerifyCodeViewSlice(cap int) *TelnoVerifyCodeViewSlice {
	s := TelnoVerifyCodeViewSlice(make([]TelnoVerifyCodeView, 0, cap))
	return &s
}

func (s *TelnoVerifyCodeViewSlice) Slice() []TelnoVerifyCodeView {
	return []TelnoVerifyCodeView(*s)
}

func (s *TelnoVerifyCodeViewSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	if table == "telno_verify_code" {
		for len(*s) <= index {
			x := TelnoVerifyCode{}
			*s = append(*s, TelnoVerifyCodeView{TelnoVerifyCode: x})
		}
		x := &((*s)[index].TelnoVerifyCode)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	TelnoVerifyCodeViewVar  = TelnoVerifyCodeView{}
	telnoVerifyCodeViewRefs = map[string]storage.View{}
)

func (TelnoVerifyCodeView) Table() string { return TelnoVerifyCodeMetaVar.Name() }
func (TelnoVerifyCodeView) Fields() storage.FieldList {
	return storage.FieldSlice(TelnoVerifyCodeMetaVar.Fields())
}
func (TelnoVerifyCodeView) Refs() map[string]storage.View { return telnoVerifyCodeViewRefs }
func (view *TelnoVerifyCodeView) tables() map[string]storage.WriteonlyTable {
	m := make(map[string]storage.WriteonlyTable)
	m["telno_verify_code"] = &view.TelnoVerifyCode
	return m
}

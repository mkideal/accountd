// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
)

// Table

type Session struct {
	Id       string `xorm:"pk TEXT"`     // 唯一Id,用作cookie
	Uid      int64  `xorm:"BIGINT(20)"`  // 关联的用户Id
	ExpireAt string `xorm:"VARCHAR(32)"` // 到期时间

}

func NewSession() *Session {
	return &Session{}
}

func (Session) Meta() storage.TableMeta { return SessionMetaVar }
func (x Session) Key() interface{}      { return x.Id }
func (x *Session) SetKey(value string) error {
	x.Id = value
	return nil
}

func (x Session) GetField(field string) (interface{}, bool) {
	switch field {
	case SessionMetaVar.F_uid:
		return x.Uid, true
	case SessionMetaVar.F_expire_at:
		return x.ExpireAt, true
	}
	return nil, false
}

func (x *Session) SetField(field, value string) error {
	switch field {
	case SessionMetaVar.F_uid:
		return typeconv.String2Int64(&x.Uid, value)
	case SessionMetaVar.F_expire_at:
		x.ExpireAt = value
	}
	return nil
}

// Meta
type SessionMeta struct {
	F_uid       string
	F_expire_at string
}

func (SessionMeta) Name() string     { return "session" }
func (SessionMeta) Fields() []string { return _session_fields }

var SessionMetaVar = &SessionMeta{
	F_uid:       "uid",
	F_expire_at: "expire_at",
}

var _session_fields = []string{
	SessionMetaVar.F_uid,
	SessionMetaVar.F_expire_at,
}

// Slice
type SessionSlice []Session

func NewSessionSlice(cap int) *SessionSlice {
	s := SessionSlice(make([]Session, 0, cap))
	return &s
}

func (s SessionSlice) Len() int                                  { return len(s) }
func (s SessionSlice) ReadonlyTable(i int) storage.ReadonlyTable { return s[i] }
func (s *SessionSlice) Slice() []Session                         { return []Session(*s) }

func (s *SessionSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	for len(*s) <= index {
		*s = append(*s, Session{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type SessionView struct {
	Session
}

type SessionViewSlice []SessionView

func NewSessionViewSlice(cap int) *SessionViewSlice {
	s := SessionViewSlice(make([]SessionView, 0, cap))
	return &s
}

func (s *SessionViewSlice) Slice() []SessionView {
	return []SessionView(*s)
}

func (s *SessionViewSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	if table == "session" {
		for len(*s) <= index {
			x := Session{}
			*s = append(*s, SessionView{Session: x})
		}
		x := &((*s)[index].Session)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	SessionViewVar  = SessionView{}
	sessionViewRefs = map[string]storage.View{}
)

func (SessionView) Table() string                 { return SessionMetaVar.Name() }
func (SessionView) Fields() storage.FieldList     { return storage.FieldSlice(SessionMetaVar.Fields()) }
func (SessionView) Refs() map[string]storage.View { return sessionViewRefs }
func (view *SessionView) tables() map[string]storage.WriteonlyTable {
	m := make(map[string]storage.WriteonlyTable)
	m["session"] = &view.Session
	return m
}

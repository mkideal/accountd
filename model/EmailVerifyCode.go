// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
)

// Table

// 邮箱验证码
type EmailVerifyCode struct {
	Id        int64  `xorm:"pk BIGINT(20) AUTO_INCREMENT"` // 递增唯一Id
	Email     string `xorm:"VARCHAR(64)"`                  // email 地址
	Code      string `xorm:"VARCHAR(64) UNIQUE"`           // 验证码
	ExpiredAt string `xorm:"VARCHAR(32)"`                  // 到期时间

}

func NewEmailVerifyCode() *EmailVerifyCode {
	return &EmailVerifyCode{}
}

func (EmailVerifyCode) Meta() storage.TableMeta { return EmailVerifyCodeMetaVar }
func (x EmailVerifyCode) Key() interface{}      { return x.Id }
func (x *EmailVerifyCode) SetKey(value string) error {
	return typeconv.String2Int64(&x.Id, value)
}

func (x EmailVerifyCode) GetField(field string) (interface{}, bool) {
	switch field {
	case EmailVerifyCodeMetaVar.F_email:
		return x.Email, true
	case EmailVerifyCodeMetaVar.F_code:
		return x.Code, true
	case EmailVerifyCodeMetaVar.F_expired_at:
		return x.ExpiredAt, true
	}
	return nil, false
}

func (x *EmailVerifyCode) SetField(field, value string) error {
	switch field {
	case EmailVerifyCodeMetaVar.F_email:
		x.Email = value
	case EmailVerifyCodeMetaVar.F_code:
		x.Code = value
	case EmailVerifyCodeMetaVar.F_expired_at:
		x.ExpiredAt = value
	}
	return nil
}

// Meta
type EmailVerifyCodeMeta struct {
	F_email      string
	F_code       string
	F_expired_at string
}

func (EmailVerifyCodeMeta) Name() string     { return "email_verify_code" }
func (EmailVerifyCodeMeta) Key() string      { return "id" }
func (EmailVerifyCodeMeta) Fields() []string { return _email_verify_code_fields }

var EmailVerifyCodeMetaVar = &EmailVerifyCodeMeta{
	F_email:      "email",
	F_code:       "code",
	F_expired_at: "expired_at",
}

var _email_verify_code_fields = []string{
	EmailVerifyCodeMetaVar.F_email,
	EmailVerifyCodeMetaVar.F_code,
	EmailVerifyCodeMetaVar.F_expired_at,
}

// Slice
type EmailVerifyCodeSlice []EmailVerifyCode

func NewEmailVerifyCodeSlice(cap int) *EmailVerifyCodeSlice {
	s := EmailVerifyCodeSlice(make([]EmailVerifyCode, 0, cap))
	return &s
}

func (s EmailVerifyCodeSlice) Len() int                                  { return len(s) }
func (s EmailVerifyCodeSlice) ReadonlyTable(i int) storage.ReadonlyTable { return s[i] }
func (s *EmailVerifyCodeSlice) Slice() []EmailVerifyCode                 { return []EmailVerifyCode(*s) }

func (s *EmailVerifyCodeSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	for len(*s) <= index {
		*s = append(*s, EmailVerifyCode{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type EmailVerifyCodeView struct {
	EmailVerifyCode
}

type EmailVerifyCodeViewSlice []EmailVerifyCodeView

func NewEmailVerifyCodeViewSlice(cap int) *EmailVerifyCodeViewSlice {
	s := EmailVerifyCodeViewSlice(make([]EmailVerifyCodeView, 0, cap))
	return &s
}

func (s *EmailVerifyCodeViewSlice) Slice() []EmailVerifyCodeView {
	return []EmailVerifyCodeView(*s)
}

func (s *EmailVerifyCodeViewSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	if table == "email_verify_code" {
		for len(*s) <= index {
			x := EmailVerifyCode{}
			*s = append(*s, EmailVerifyCodeView{EmailVerifyCode: x})
		}
		x := &((*s)[index].EmailVerifyCode)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	EmailVerifyCodeViewVar  = EmailVerifyCodeView{}
	emailVerifyCodeViewRefs = map[string]storage.View{}
)

func (EmailVerifyCodeView) Table() string { return EmailVerifyCodeMetaVar.Name() }
func (EmailVerifyCodeView) Fields() storage.FieldList {
	return storage.FieldSlice(EmailVerifyCodeMetaVar.Fields())
}
func (EmailVerifyCodeView) Refs() map[string]storage.View { return emailVerifyCodeViewRefs }
func (view *EmailVerifyCodeView) tables() map[string]storage.WriteonlyTable {
	m := make(map[string]storage.WriteonlyTable)
	m["email_verify_code"] = &view.EmailVerifyCode
	return m
}

// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
)

// Table

// 用户信息
type User struct {
	Id                int64       `xorm:"pk BIGINT(20)"`       // 随机唯一Id
	AccountType       AccountType `xorm:"BIGINT(20)"`          // 账号类型
	Account           string      `xorm:"VARCHAR(128) UNIQUE"` // 账号
	Nickname          string      `xorm:"VARCHAR(32)"`         // 昵称
	Avatar            string      `xorm:"VARCHAR(256)"`        // 头像
	Qrcode            string      `xorm:"TEXT"`                // 二维码
	Gender            Gender      `xorm:"BIGINT(20)"`          // 性别
	Birthday          string      `xorm:"VARCHAR(32)"`         // 生日
	IdCardType        IdCardType  `xorm:"BIGINT(20)"`          // 身份证件类型
	IdCard            string      `xorm:"VARCHAR(64)"`         // 证件唯一标识
	EncryptedPassword string      `xorm:"VARCHAR(64)"`         // 加密后密码
	PasswordSalt      string      `xorm:"VARCHAR(64)"`         // 加密密码的盐
	CreatedAt         string      `xorm:"VARCHAR(32)"`         // 账号创建时间
	CreatedIp         string      `xorm:"VARCHAR(32)"`         // 账号创建时IP
	LastLoginAt       string      `xorm:"VARCHAR(32)"`         // 最后登陆时间
	LastLoginIp       string      `xorm:"VARCHAR(32)"`         // 最后登陆时IP

}

func NewUser() *User {
	return &User{}
}

func (User) Meta() storage.TableMeta { return UserMetaVar }
func (x User) Key() interface{}      { return x.Id }
func (x *User) SetKey(value string) error {
	return typeconv.String2Int64(&x.Id, value)
}

func (x User) GetField(field string) (interface{}, bool) {
	switch field {
	case UserMetaVar.F_account_type:
		return x.AccountType, true
	case UserMetaVar.F_account:
		return x.Account, true
	case UserMetaVar.F_nickname:
		return x.Nickname, true
	case UserMetaVar.F_avatar:
		return x.Avatar, true
	case UserMetaVar.F_qrcode:
		return x.Qrcode, true
	case UserMetaVar.F_gender:
		return x.Gender, true
	case UserMetaVar.F_birthday:
		return x.Birthday, true
	case UserMetaVar.F_id_card_type:
		return x.IdCardType, true
	case UserMetaVar.F_id_card:
		return x.IdCard, true
	case UserMetaVar.F_encrypted_password:
		return x.EncryptedPassword, true
	case UserMetaVar.F_password_salt:
		return x.PasswordSalt, true
	case UserMetaVar.F_created_at:
		return x.CreatedAt, true
	case UserMetaVar.F_created_ip:
		return x.CreatedIp, true
	case UserMetaVar.F_last_login_at:
		return x.LastLoginAt, true
	case UserMetaVar.F_last_login_ip:
		return x.LastLoginIp, true
	}
	return nil, false
}

func (x *User) SetField(field, value string) error {
	switch field {
	case UserMetaVar.F_account_type:
		var tmp int
		if err := typeconv.String2Int(&tmp, value); err != nil {
			return err
		}
		x.AccountType = AccountType(tmp)
	case UserMetaVar.F_account:
		x.Account = value
	case UserMetaVar.F_nickname:
		x.Nickname = value
	case UserMetaVar.F_avatar:
		x.Avatar = value
	case UserMetaVar.F_qrcode:
		x.Qrcode = value
	case UserMetaVar.F_gender:
		var tmp int
		if err := typeconv.String2Int(&tmp, value); err != nil {
			return err
		}
		x.Gender = Gender(tmp)
	case UserMetaVar.F_birthday:
		x.Birthday = value
	case UserMetaVar.F_id_card_type:
		var tmp int
		if err := typeconv.String2Int(&tmp, value); err != nil {
			return err
		}
		x.IdCardType = IdCardType(tmp)
	case UserMetaVar.F_id_card:
		x.IdCard = value
	case UserMetaVar.F_encrypted_password:
		x.EncryptedPassword = value
	case UserMetaVar.F_password_salt:
		x.PasswordSalt = value
	case UserMetaVar.F_created_at:
		x.CreatedAt = value
	case UserMetaVar.F_created_ip:
		x.CreatedIp = value
	case UserMetaVar.F_last_login_at:
		x.LastLoginAt = value
	case UserMetaVar.F_last_login_ip:
		x.LastLoginIp = value
	}
	return nil
}

// Meta
type UserMeta struct {
	F_account_type       string
	F_account            string
	F_nickname           string
	F_avatar             string
	F_qrcode             string
	F_gender             string
	F_birthday           string
	F_id_card_type       string
	F_id_card            string
	F_encrypted_password string
	F_password_salt      string
	F_created_at         string
	F_created_ip         string
	F_last_login_at      string
	F_last_login_ip      string
}

func (UserMeta) Name() string     { return "user" }
func (UserMeta) Key() string      { return "id" }
func (UserMeta) Fields() []string { return _user_fields }

var UserMetaVar = &UserMeta{
	F_account_type:       "account_type",
	F_account:            "account",
	F_nickname:           "nickname",
	F_avatar:             "avatar",
	F_qrcode:             "qrcode",
	F_gender:             "gender",
	F_birthday:           "birthday",
	F_id_card_type:       "id_card_type",
	F_id_card:            "id_card",
	F_encrypted_password: "encrypted_password",
	F_password_salt:      "password_salt",
	F_created_at:         "created_at",
	F_created_ip:         "created_ip",
	F_last_login_at:      "last_login_at",
	F_last_login_ip:      "last_login_ip",
}

var _user_fields = []string{
	UserMetaVar.F_account_type,
	UserMetaVar.F_account,
	UserMetaVar.F_nickname,
	UserMetaVar.F_avatar,
	UserMetaVar.F_qrcode,
	UserMetaVar.F_gender,
	UserMetaVar.F_birthday,
	UserMetaVar.F_id_card_type,
	UserMetaVar.F_id_card,
	UserMetaVar.F_encrypted_password,
	UserMetaVar.F_password_salt,
	UserMetaVar.F_created_at,
	UserMetaVar.F_created_ip,
	UserMetaVar.F_last_login_at,
	UserMetaVar.F_last_login_ip,
}

// Slice
type UserSlice []User

func NewUserSlice(cap int) *UserSlice {
	s := UserSlice(make([]User, 0, cap))
	return &s
}

func (s UserSlice) Len() int                                  { return len(s) }
func (s UserSlice) ReadonlyTable(i int) storage.ReadonlyTable { return s[i] }
func (s *UserSlice) Slice() []User                            { return []User(*s) }

func (s *UserSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	for len(*s) <= index {
		*s = append(*s, User{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type UserView struct {
	User
}

type UserViewSlice []UserView

func NewUserViewSlice(cap int) *UserViewSlice {
	s := UserViewSlice(make([]UserView, 0, cap))
	return &s
}

func (s *UserViewSlice) Slice() []UserView {
	return []UserView(*s)
}

func (s *UserViewSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	if table == "user" {
		for len(*s) <= index {
			x := User{}
			*s = append(*s, UserView{User: x})
		}
		x := &((*s)[index].User)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	UserViewVar  = UserView{}
	userViewRefs = map[string]storage.View{}
)

func (UserView) Table() string                 { return UserMetaVar.Name() }
func (UserView) Fields() storage.FieldList     { return storage.FieldSlice(UserMetaVar.Fields()) }
func (UserView) Refs() map[string]storage.View { return userViewRefs }
func (view *UserView) tables() map[string]storage.WriteonlyTable {
	m := make(map[string]storage.WriteonlyTable)
	m["user"] = &view.User
	return m
}

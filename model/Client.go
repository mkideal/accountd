// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
)

// Table

// 访问客户端
type Client struct {
	Id          string `xorm:"pk TEXT"`
	Secret      string `xorm:"TEXT"`
	Name        string `xorm:"TEXT"`
	Scope       string `xorm:"TEXT"`
	Description string `xorm:"TEXT"`
	CallbackURL string `xorm:"TEXT"`
}

func NewClient() *Client {
	return &Client{}
}

func (Client) Meta() storage.TableMeta { return ClientMetaVar }
func (x Client) Key() interface{}      { return x.Id }
func (x *Client) SetKey(value string) error {
	x.Id = value
	return nil
}

func (x Client) GetField(field string) (interface{}, bool) {
	switch field {
	case ClientMetaVar.F_secret:
		return x.Secret, true
	case ClientMetaVar.F_name:
		return x.Name, true
	case ClientMetaVar.F_scope:
		return x.Scope, true
	case ClientMetaVar.F_description:
		return x.Description, true
	case ClientMetaVar.F_callback_url:
		return x.CallbackURL, true
	}
	return nil, false
}

func (x *Client) SetField(field, value string) error {
	switch field {
	case ClientMetaVar.F_secret:
		x.Secret = value
	case ClientMetaVar.F_name:
		x.Name = value
	case ClientMetaVar.F_scope:
		x.Scope = value
	case ClientMetaVar.F_description:
		x.Description = value
	case ClientMetaVar.F_callback_url:
		x.CallbackURL = value
	}
	return nil
}

// Meta
type ClientMeta struct {
	F_secret       string
	F_name         string
	F_scope        string
	F_description  string
	F_callback_url string
}

func (ClientMeta) Name() string     { return "client" }
func (ClientMeta) Fields() []string { return _client_fields }

var ClientMetaVar = &ClientMeta{
	F_secret:       "secret",
	F_name:         "name",
	F_scope:        "scope",
	F_description:  "description",
	F_callback_url: "callback_url",
}

var _client_fields = []string{
	ClientMetaVar.F_secret,
	ClientMetaVar.F_name,
	ClientMetaVar.F_scope,
	ClientMetaVar.F_description,
	ClientMetaVar.F_callback_url,
}

// Slice
type ClientSlice []Client

func NewClientSlice(cap int) *ClientSlice {
	s := ClientSlice(make([]Client, 0, cap))
	return &s
}

func (s ClientSlice) Len() int                                  { return len(s) }
func (s ClientSlice) ReadonlyTable(i int) storage.ReadonlyTable { return s[i] }
func (s *ClientSlice) Slice() []Client                          { return []Client(*s) }

func (s *ClientSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	for len(*s) <= index {
		*s = append(*s, Client{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type ClientView struct {
	Client
}

type ClientViewSlice []ClientView

func NewClientViewSlice(cap int) *ClientViewSlice {
	s := ClientViewSlice(make([]ClientView, 0, cap))
	return &s
}

func (s *ClientViewSlice) Slice() []ClientView {
	return []ClientView(*s)
}

func (s *ClientViewSlice) New(table string, index int, key string) (storage.FieldSetter, error) {
	if table == "client" {
		for len(*s) <= index {
			x := Client{}
			*s = append(*s, ClientView{Client: x})
		}
		x := &((*s)[index].Client)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	ClientViewVar  = ClientView{}
	clientViewRefs = map[string]storage.View{}
)

func (ClientView) Table() string                 { return ClientMetaVar.Name() }
func (ClientView) Fields() storage.FieldList     { return storage.FieldSlice(ClientMetaVar.Fields()) }
func (ClientView) Refs() map[string]storage.View { return clientViewRefs }
func (view *ClientView) tables() map[string]storage.WriteonlyTable {
	m := make(map[string]storage.WriteonlyTable)
	m["client"] = &view.Client
	return m
}

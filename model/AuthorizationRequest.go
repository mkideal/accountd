// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/mkideal/pkg/storage"
	"github.com/mkideal/pkg/typeconv"
	"gopkg.in/redis.v5"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
	_ = redis.Nil
)

// Table

// 认证请求
type AuthorizationRequest struct {
	AuthorizationCode string `xorm:"pk VARCHAR(64)"` // 认证码
	CreatedAt         string `xorm:"VARCHAR(32)"`    // 创建时间
	RedirectUri       string `xorm:"VARCHAR(256)"`   // 重定向URI
	ResponseType      string `xorm:"VARCHAR(32)"`    // 返回类型
	State             string `xorm:"VARCHAR(128)"`   // 自定义状态
	ClientId          string `xorm:"VARCHAR(32)"`    // 客户端Id
	Uid               int64  `xorm:"BIGINT(20)"`     // 关联的用户Id
	GrantedScopes     string `xorm:"TEXT"`           // 授权范围
	RequestedScopes   string `xorm:"TEXT"`           // 请求范围

}

func NewAuthorizationRequest() *AuthorizationRequest {
	return &AuthorizationRequest{}
}

func (AuthorizationRequest) Meta() AuthorizationRequestMeta { return authorizationRequestMetaVar }
func (AuthorizationRequest) TableMeta() storage.TableMeta   { return authorizationRequestMetaVar }
func (x AuthorizationRequest) Key() interface{}             { return x.AuthorizationCode }
func (x *AuthorizationRequest) SetKey(value string) error {
	x.AuthorizationCode = value
	return nil
}

func (x AuthorizationRequest) GetField(field string) (interface{}, bool) {
	switch field {
	case authorizationRequestMetaVar.F_created_at:
		return x.CreatedAt, true
	case authorizationRequestMetaVar.F_redirect_uri:
		return x.RedirectUri, true
	case authorizationRequestMetaVar.F_response_type:
		return x.ResponseType, true
	case authorizationRequestMetaVar.F_state:
		return x.State, true
	case authorizationRequestMetaVar.F_client_id:
		return x.ClientId, true
	case authorizationRequestMetaVar.F_uid:
		return x.Uid, true
	case authorizationRequestMetaVar.F_granted_scopes:
		return x.GrantedScopes, true
	case authorizationRequestMetaVar.F_requested_scopes:
		return x.RequestedScopes, true
	}
	return nil, false
}

func (x *AuthorizationRequest) SetField(field, value string) error {
	switch field {
	case authorizationRequestMetaVar.F_created_at:
		x.CreatedAt = value
	case authorizationRequestMetaVar.F_redirect_uri:
		x.RedirectUri = value
	case authorizationRequestMetaVar.F_response_type:
		x.ResponseType = value
	case authorizationRequestMetaVar.F_state:
		x.State = value
	case authorizationRequestMetaVar.F_client_id:
		x.ClientId = value
	case authorizationRequestMetaVar.F_uid:
		return typeconv.String2Int64(&x.Uid, value)
	case authorizationRequestMetaVar.F_granted_scopes:
		x.GrantedScopes = value
	case authorizationRequestMetaVar.F_requested_scopes:
		x.RequestedScopes = value
	}
	return nil
}

// Meta
type AuthorizationRequestMeta struct {
	F_created_at       string
	F_redirect_uri     string
	F_response_type    string
	F_state            string
	F_client_id        string
	F_uid              string
	F_granted_scopes   string
	F_requested_scopes string
}

func (AuthorizationRequestMeta) Name() string     { return "authorization_request" }
func (AuthorizationRequestMeta) Key() string      { return "authorization_code" }
func (AuthorizationRequestMeta) Fields() []string { return _authorization_request_fields }

var authorizationRequestMetaVar = AuthorizationRequestMeta{
	F_created_at:       "created_at",
	F_redirect_uri:     "redirect_uri",
	F_response_type:    "response_type",
	F_state:            "state",
	F_client_id:        "client_id",
	F_uid:              "uid",
	F_granted_scopes:   "granted_scopes",
	F_requested_scopes: "requested_scopes",
}

var _authorization_request_fields = []string{
	authorizationRequestMetaVar.F_created_at,
	authorizationRequestMetaVar.F_redirect_uri,
	authorizationRequestMetaVar.F_response_type,
	authorizationRequestMetaVar.F_state,
	authorizationRequestMetaVar.F_client_id,
	authorizationRequestMetaVar.F_uid,
	authorizationRequestMetaVar.F_granted_scopes,
	authorizationRequestMetaVar.F_requested_scopes,
}

// Slice
type AuthorizationRequestSlice []AuthorizationRequest

func NewAuthorizationRequestSlice(cap int) *AuthorizationRequestSlice {
	s := AuthorizationRequestSlice(make([]AuthorizationRequest, 0, cap))
	return &s
}

func (s AuthorizationRequestSlice) TableMeta() storage.TableMeta   { return authorizationRequestMetaVar }
func (s AuthorizationRequestSlice) Len() int                       { return len(s) }
func (s *AuthorizationRequestSlice) Slice() []AuthorizationRequest { return []AuthorizationRequest(*s) }

func (s *AuthorizationRequestSlice) New(table string, index int, key string) (storage.Table, error) {
	for len(*s) <= index {
		*s = append(*s, AuthorizationRequest{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type AuthorizationRequestView struct {
	AuthorizationRequest
}

type AuthorizationRequestViewSlice []AuthorizationRequestView

func NewAuthorizationRequestViewSlice(cap int) *AuthorizationRequestViewSlice {
	s := AuthorizationRequestViewSlice(make([]AuthorizationRequestView, 0, cap))
	return &s
}

func (s AuthorizationRequestViewSlice) TableMeta() storage.TableMeta {
	return authorizationRequestMetaVar
}
func (s AuthorizationRequestViewSlice) Len() int { return len(s) }
func (s *AuthorizationRequestViewSlice) Slice() []AuthorizationRequestView {
	return []AuthorizationRequestView(*s)
}

func (s *AuthorizationRequestViewSlice) New(table string, index int, key string) (storage.Table, error) {
	if table == "authorization_request" {
		for len(*s) <= index {
			x := AuthorizationRequest{}
			*s = append(*s, AuthorizationRequestView{AuthorizationRequest: x})
		}
		x := &((*s)[index].AuthorizationRequest)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	AuthorizationRequestViewVar  = AuthorizationRequestView{}
	authorizationRequestViewRefs = map[string]storage.View{}
)

func (AuthorizationRequestView) TableMeta() storage.TableMeta { return authorizationRequestMetaVar }
func (AuthorizationRequestView) Fields() storage.FieldList {
	return storage.FieldSlice(authorizationRequestMetaVar.Fields())
}
func (AuthorizationRequestView) Refs() map[string]storage.View { return authorizationRequestViewRefs }
func (view *AuthorizationRequestView) tables() map[string]storage.Table {
	m := make(map[string]storage.Table)
	m["authorization_request"] = &view.AuthorizationRequest
	return m
}

// NOTE: AUTO-GENERATED by midc, DON'T edit!!

package model

import (
	"fmt"

	"github.com/midlang/mid/x/go/storage"
	"github.com/mkideal/pkg/typeconv"
	"gopkg.in/redis.v5"
)

var (
	_ = fmt.Printf
	_ = storage.Unused
	_ = typeconv.Unused
	_ = redis.Nil
)

// Table

// 访问令牌
type Token struct {
	AccessToken          string `xorm:"pk VARCHAR(64) UNIQUE"` // 令牌
	Uid                  int64  `xorm:"BIGINT(20)"`            // 用户Id
	CreatedAt            string `xorm:"VARCHAR(32)"`           // 创建时间
	AccessTokenExpireAt  string `xorm:"VARCHAR(32)"`           // accessToken到期时间
	RefreshToken         string `xorm:"VARCHAR(64) UNIQUE"`    // 刷新用令牌
	RefreshTokenExpireAt string `xorm:"VARCHAR(32)"`           // refreshToken到期时间
	ResourceOwner        string `xorm:"VARCHAR(32)"`           // 资源所有者
	ClientId             string `xorm:"VARCHAR(32)"`           // 客户Id
	Scope                string `xorm:"TEXT"`                  // 可访问权限范围

}

func NewToken() *Token {
	return &Token{}
}

func (Token) Meta() TokenMeta              { return tokenMetaVar }
func (Token) TableMeta() storage.TableMeta { return tokenMetaVar }
func (x Token) Key() interface{}           { return x.AccessToken }
func (x *Token) SetKey(value string) error {
	x.AccessToken = value
	return nil
}

func (x Token) GetField(field string) (interface{}, bool) {
	switch field {
	case tokenMetaVar.F_uid:
		return x.Uid, true
	case tokenMetaVar.F_created_at:
		return x.CreatedAt, true
	case tokenMetaVar.F_access_token_expire_at:
		return x.AccessTokenExpireAt, true
	case tokenMetaVar.F_refresh_token:
		return x.RefreshToken, true
	case tokenMetaVar.F_refresh_token_expire_at:
		return x.RefreshTokenExpireAt, true
	case tokenMetaVar.F_resource_owner:
		return x.ResourceOwner, true
	case tokenMetaVar.F_client_id:
		return x.ClientId, true
	case tokenMetaVar.F_scope:
		return x.Scope, true
	}
	return nil, false
}

func (x *Token) SetField(field, value string) error {
	switch field {
	case tokenMetaVar.F_uid:
		return typeconv.String2Int64(&x.Uid, value)
	case tokenMetaVar.F_created_at:
		x.CreatedAt = value
	case tokenMetaVar.F_access_token_expire_at:
		x.AccessTokenExpireAt = value
	case tokenMetaVar.F_refresh_token:
		x.RefreshToken = value
	case tokenMetaVar.F_refresh_token_expire_at:
		x.RefreshTokenExpireAt = value
	case tokenMetaVar.F_resource_owner:
		x.ResourceOwner = value
	case tokenMetaVar.F_client_id:
		x.ClientId = value
	case tokenMetaVar.F_scope:
		x.Scope = value
	}
	return nil
}

// Meta
type TokenMeta struct {
	F_uid                     string
	F_created_at              string
	F_access_token_expire_at  string
	F_refresh_token           string
	F_refresh_token_expire_at string
	F_resource_owner          string
	F_client_id               string
	F_scope                   string
}

func (TokenMeta) Name() string     { return "token" }
func (TokenMeta) Key() string      { return "access_token" }
func (TokenMeta) Fields() []string { return _token_fields }

var tokenMetaVar = TokenMeta{
	F_uid:                     "uid",
	F_created_at:              "created_at",
	F_access_token_expire_at:  "access_token_expire_at",
	F_refresh_token:           "refresh_token",
	F_refresh_token_expire_at: "refresh_token_expire_at",
	F_resource_owner:          "resource_owner",
	F_client_id:               "client_id",
	F_scope:                   "scope",
}

var _token_fields = []string{
	tokenMetaVar.F_uid,
	tokenMetaVar.F_created_at,
	tokenMetaVar.F_access_token_expire_at,
	tokenMetaVar.F_refresh_token,
	tokenMetaVar.F_refresh_token_expire_at,
	tokenMetaVar.F_resource_owner,
	tokenMetaVar.F_client_id,
	tokenMetaVar.F_scope,
}

// Slice
type TokenSlice []Token

func NewTokenSlice(cap int) *TokenSlice {
	s := TokenSlice(make([]Token, 0, cap))
	return &s
}

func (s TokenSlice) TableMeta() storage.TableMeta { return tokenMetaVar }
func (s TokenSlice) Len() int                     { return len(s) }
func (s *TokenSlice) Slice() []Token              { return []Token(*s) }

func (s *TokenSlice) New(table string, index int, key string) (storage.Table, error) {
	for len(*s) <= index {
		*s = append(*s, Token{})
	}
	x := &((*s)[index])
	err := x.SetKey(key)
	return x, err
}

// View
type TokenView struct {
	Token
}

type TokenViewSlice []TokenView

func NewTokenViewSlice(cap int) *TokenViewSlice {
	s := TokenViewSlice(make([]TokenView, 0, cap))
	return &s
}

func (s TokenViewSlice) TableMeta() storage.TableMeta { return tokenMetaVar }
func (s TokenViewSlice) Len() int                     { return len(s) }
func (s *TokenViewSlice) Slice() []TokenView          { return []TokenView(*s) }

func (s *TokenViewSlice) New(table string, index int, key string) (storage.Table, error) {
	if table == "token" {
		for len(*s) <= index {
			x := Token{}
			*s = append(*s, TokenView{Token: x})
		}
		x := &((*s)[index].Token)
		err := x.SetKey(key)
		return x, err
	}
	v := &((*s)[index])
	for t, x := range v.tables() {
		if t == table {
			err := x.SetKey(key)
			return x, err
		}
	}
	return nil, storage.ErrTableNotFoundInView
}

var (
	TokenViewVar  = TokenView{}
	tokenViewRefs = map[string]storage.View{}
)

func (TokenView) TableMeta() storage.TableMeta  { return tokenMetaVar }
func (TokenView) Fields() storage.FieldList     { return storage.FieldSlice(tokenMetaVar.Fields()) }
func (TokenView) Refs() map[string]storage.View { return tokenViewRefs }
func (view *TokenView) tables() map[string]storage.Table {
	m := make(map[string]storage.Table)
	m["token"] = &view.Token
	return m
}

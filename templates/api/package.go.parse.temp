---
file: parse.go
---
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package {{context.Pkg.Name}}

import (
	"net/http"
	"net/url"

	"github.com/mkideal/pkg/netutil/httputil"
	"github.com/mkideal/pkg/typeconv"
)

{{define "T_protocol"}}
{{$bean := .}}
{{$type := $bean.Name}}
{{if hasSuffix "Req" $type}}
{{$cmd := trimSuffix "Req" $type}}
func (argv *{{$cmd}}Req) Parse(r *http.Request) error {
	var err error
	{{range $field := $bean.Fields}}
		{{- $key := newString}}
		{{- $tmp := newString}}
		{{- $tag := $field.GetTag "form"}}
		{{- if eq $tag ""}}
			{{- $key.Set (underScore $field.Name)}}
		{{- else}}
			{{- $key.Set $tag}}
		{{- end}}
		{{- $fieldType := context.BuildType $field.Type -}}
		argv.{{title $field.Name}}, err = httputil.Parse{{title $fieldType}}(r, "{{$key.Get}}")
		if err != nil {
			return err
		}
	{{end}}
	return err
}

func (argv *{{$cmd}}Req) Values() url.Values {
	return url.Values{
	{{range $field := $bean.Fields}}
		{{- $key := newString}}
		{{- $tmp := newString}}
		{{- $tag := $field.GetTag "form"}}
		{{- if eq $tag ""}}
			{{- $key.Set (underScore $field.Name)}}
		{{- else}}
			{{- $key.Set $tag}}
		{{- end}}"{{$key.Get}}": {{join "" "{typeconv.ToString(argv." (title $field.Name) ")}"}},
	{{end}}
	}
}
{{end}}
{{end}}

{{.GenerateDeclsBySubTemplates}}

---
file: register.go
---
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package server

import (
	"net/http"

	"github.com/mkideal/pkg/netutil/httputil"
)

func (svr *Server) registerAllHandlers(mux *httputil.ServeMux) {
	{{- range $name, $bean := context.Beans}}
	{{- $method := newString}}
	{{- $method.Set (.GetTag "method")}}
	{{- if eq ($method.Get) ""}}
		{{- $method.Set "GET"}}
	{{- end}}
	{{- if hasSuffix "Req" $name}}
	{{- $cmd := trimSuffix "Req" $name}}
	svr.registerHandler(mux, "/v1/{{underScore $cmd}}", "{{$method.Get}}", svr.handle{{$cmd}})
	{{- end}}
	{{- end}}
}

func (svr *Server) registerHandler(mux *httputil.ServeMux, pattern, method string, h http.HandlerFunc) {
	mux.Handle(pattern, httputil.NewHandlerFunc(method, h))
}

{{define "T_const"}}
{{range $decl := .}}
{{$decl.Doc}}const (
	{{range $field := $decl.Consts}}{{$field.Name}} = {{$field.ValueString}}{{$field.Comment}}
	{{end}}
)
{{end}}
{{end}}

{{define "T_enum"}}
{{$type := .Name}}
type {{$type}} int
{{.Doc}}const (
	{{range $field := .Fields}}{{$type}}_{{$field.Name}} {{$type}} = {{$field.Value}}{{$field.Comment}}
	{{end}}
)
{{end}}

{{define "T_struct"}}
{{$type := .Name}}
{{.Doc}}type {{$type}} struct {
	{{range $field := .Fields}}{{$field.Name | title}} {{context.BuildType $field.Type}} `json:"{{$field.Name}}"`{{$field.Comment}}
	{{end}}
}
{{end}}

{{define "T_protocol"}}
{{$bean := .}}
{{$type := $bean.Name}}
{{.Doc}}type {{$type}} struct {
	{{range $field := $bean.Fields}}{{$field.Name | title}} {{context.BuildType $field.Type}} `json:"{{$field.Name}}"`{{$field.Comment}}
	{{end}}
}
{{if hasSuffix "Req" $type}}
{{$cmd := trimSuffix "Req" $type}}
func ({{$type}}) CommandName() string { return "{{$cmd}}" }

func parse{{$cmd}}(r *http.Request) (*{{$type}}, error) {
	var (
		argv = new({{$type}})
		err error
	)
	{{range $field := $bean.Fields}}
		{{- $key := newString}}
		{{- $tmp := newString}}
		{{- $tag := $field.GetTag "form"}}
		{{- if eq $tag ""}}
			{{- $key.Set (underScore $field.Name)}}
		{{- else}}
			{{- $key.Set $tag}}
		{{- end}}
		{{- $fieldType := context.BuildType $field.Type -}}
		argv.{{title $field.Name}}, err = httputil.Parse{{title $fieldType}}(r, "{{$key.Get}}")
		if err != nil {
			return nil, err
		}
	{{end}}
	return argv, err
}
{{end}}
{{end}}

{{.GenerateDeclsBySubTemplates}}

---
file: api.go
---
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// NOTE: auto generated by midc, DON'T edit
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
package {{context.Pkg.Name}}

import (
	"net/http"
	"net/url"
)

{{define "T_const"}}
{{range $decl := .}}
{{$decl.Doc}}const (
	{{range $field := $decl.Consts}}{{$field.Name}} = {{$field.ValueString}}{{$field.Comment}}
	{{end}}
)
{{end}}
{{end}}

{{define "T_enum"}}
{{$type := .Name}}
type {{$type}} int
{{.Doc}}const (
	{{range $field := .Fields}}{{$type}}_{{$field.Name}} {{$type}} = {{$field.Value}}{{$field.Comment}}
	{{end}}
)

func (x {{$type}}) Status() int {
	return int(x)  / 1000
}

func (x {{$type}}) NewError(description string) Error {
	err := NewError(x.Error(), description)
	err.SetStatus(x.Status())
	return err
}

func (x {{$type}}) Error() string {
	switch x {
	{{range $field := .Fields}}case {{$type}}_{{$field.Name}}: return "e_{{underScore $field.Name}}"
	{{end}}
	}
	return "e_unknown_error"
}
{{end}}

{{define "T_struct"}}
{{$type := .Name}}
{{.Doc}}type {{$type}} struct {
	{{range $field := .Fields}}
	{{- $jsonTag := newString}}
	{{- $jsonTag.Set (.GetTag "json")}}
	{{- if eq "" $jsonTag.Get}}
	   {{- $jsonTag.Set (underScore $field.Name)}}
	{{- end}}
	{{$field.Name | title}} {{context.BuildType $field.Type}} `json:"{{$jsonTag.Get}}"`{{$field.Comment}}
	{{end}}
}
{{end}}

{{define "T_protocol"}}
{{$bean := .}}
{{$type := $bean.Name}}
{{.Doc}}type {{$type}} struct {
	{{range $field := $bean.Fields}}{{$field.Name | title}} {{context.BuildType $field.Type}} `json:"{{underScore $field.Name}}"`{{$field.Comment}}
	{{end}}
}
{{if hasSuffix "Req" $type}}
{{$cmd := trimSuffix "Req" $type}}
{{- $method := newString}}
{{- $method.Set ($bean.GetTag "method")}}
{{- if eq ($method.Get) ""}}
	{{- $method.Set "GET"}}
{{- end}}
func ({{$type}}) CommandName() string { return "{{$cmd}}" }
func ({{$type}}) CommandMethod() string { return "{{$method.Get}}" }

var _ = registerCommand(&{{$type}}{})
{{end}}
{{end}}

type Request interface {
	CommandName() string
	CommandMethod() string
	Parse(*http.Request) error
	Values() url.Values
}

var commands = make(map[string]Request)
var commandList = make([]Request, 0)

func registerCommand(cmd Request) bool {
	commands[cmd.CommandName()] = cmd
	commandList = append(commandList, cmd)
	return true
}

func Commands() []Request { return commandList }
func GetCommand(name string) Request { return commands[name] }

{{.GenerateDeclsBySubTemplates}}
